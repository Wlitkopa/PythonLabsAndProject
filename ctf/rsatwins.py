
import math


def decryption(ct, n, e):
    pt = (ct**e) % n

    return pt


ct = 684151956678815994103733261966890872908254340972007896833477109225858676207046453897176861126186570268646592844185948487733725335274498844684380516667587
e = 65537
n = 14783703403657671882600600446061886156235531325852194800287001788765221084107631153330658325830443132164971084137462046607458019775851952933254941568056899
p = 121588253559534573498320028934517990374721243335397811413129137253981502291629
q = 121588253559534573498320028934517990374721243335397811413129137253981502291631
mod = (p-1)*(q-1) # rząd grupy (n, *)
# mod = 14783703403657671882600600446061886156235531325852194800287001788765221084107387976823539256683446492107102048156712604120787224153025694658746978563473640
pote_d = math.sqrt(n)
d =   3299077807627652276977480045700953663339937262910021536826050665250010325220987893248136780244809862015481662744038053003965185151155665631799058769117184


# print((d*e) % mod)
# print(d % e)
k = 0
# if d*e % mod == 1:
#     print("Względnie pierwsze")
# else:
#     print("false")
#

# print(6 % 5)
# print(2*6 % 5)

r = mod % e
print("r: ", r)
m = r
while True:
    k += 1
    # print("działa while")
    if (m + 1) % e == 0:
        print("k: ", k)
        d2 = str(int((mod * k + 1) / e))
        print(str(int((mod*k + 1)/e)))
        print("\n\n")
        break
    m = (m + r) % e
# k = 3299077807627652276977480045700953663339937262910021536826050665250010325220987893248136780244809862015481662744038053003965185151155665631799058769117184

# while True:
#     k += 1
#     # print("działa while")
#     if (mod*k + 1) % e == 0:
#         print("k: ", k)
#         print(str(int((mod*k + 1)/e)))
#         print("\n\n")
#         break
#     m = (m + r) % e


mess = hex(pow(ct, int(d2), n)).rstrip("L")

print("Checking: ", int(d2)*e % mod)
print("Plain text: ", mess)
# print("mod: ", mod)
# print("(mod + 1)/e: ", str(float((mod + 1)/e)))
